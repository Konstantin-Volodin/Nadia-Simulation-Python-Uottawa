mutate(p = n/sum(n))
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr34_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr34_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
cancer_details <- testing %>%
group_by(replication, post_scan_res) %>%
summarize(count = n()) %>%
filter(post_scan_res %in% c('Stage_1/2', 'Stage_3/4')) %>%
mutate(percent_of_positive = count/sum(count)) %>%
mutate(percent_of_total = count/testing %>% count() %>% pull(n))
cancer_details %>% ungroup() %>% #group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
time_in_system <- testing %>%
summarize(in_queue_mean = mean(in_queue),
in_queue_max = max(in_queue),
in_system_mean = mean(in_system),
in_system_max = max(in_system),
service_time_mean = mean(service_time),
service_time_max = max(service_time),)
time_in_system
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr34_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing
testing %>% fitler(scan_res == "Positive")
testing %>% filter(scan_res == "Positive")
testing %>% View()
testing %>% View()
testing %>% count(scan_res)
testing %>% count(biopsy_res)
testing %>% count(post_scan_res)
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr34_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
testing_50_m <- testing
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
library(readr)
library(tidyverse)
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr25_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
testing_50_m <- testing
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
cancer_details <- testing %>%
group_by(replication, post_scan_res) %>%
summarize(count = n()) %>%
filter(post_scan_res %in% c('Stage_1/2', 'Stage_3/4')) %>%
mutate(percent_of_positive = count/sum(count)) %>%
mutate(percent_of_total = count/testing %>% count() %>% pull(n))
cancer_details %>% ungroup() %>% #group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
time_in_system <- testing %>%
summarize(in_queue_mean = mean(in_queue),
in_queue_max = max(in_queue),
in_system_mean = mean(in_system),
in_system_max = max(in_system),
service_time_mean = mean(service_time),
service_time_max = max(service_time),)
time_in_system
testing %>% distinct(id) %>% count()
cancer_details %>% ungroup() %>% #group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
cancer_details <- testing %>%
group_by(replication, post_scan_res) %>%
summarize(count = n()) %>%
filter(post_scan_res %in% c('Stage_1/2', 'Stage_3/4')) %>%
mutate(percent_of_positive = count/sum(count)) %>%
mutate(percent_of_total = count/testing %>% count() %>% pull(n))
cancer_details
cancer_details %>% ungroup() %>% group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr30_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
cancer_details <- testing %>%
group_by(replication, post_scan_res) %>%
summarize(count = n()) %>%
filter(post_scan_res %in% c('Stage_1/2', 'Stage_3/4')) %>%
mutate(percent_of_positive = count/sum(count)) %>%
mutate(percent_of_total = count/testing %>% count() %>% pull(n))
cancer_details %>% ungroup() %>% group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
testing %>% distinct(id) %>% count()
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr35_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
library("zoo")
library("tidyverse")
library("here")
library("sys")
library("gridExtra")
library("zoo")
library("tidyverse")
library("here")
library("sys")
library("gridExtra")
generate_queueVSsarrival_graph <- function(scenarioFolder, scenarioName, arrival_rate) {
path <- rstudioapi::getActiveDocumentContext()$path %>% dirname() %>% dirname()
# Import Data
raw_multi_arrival <- read_csv(paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_multi_raw_arrival.txt",sep=""))
raw_single_arrival <- read_csv(paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_single_raw_arrival.txt",sep=""))
raw_multi_arrival <- raw_multi_arrival %>% rename(arrival = 'Arrival Amount') %>%
mutate(Replication=as.factor(Replication))
raw_single_arrival <- raw_single_arrival %>% rename(arrival = 'Arrival Amount') %>%
mutate(Replication=as.factor(Replication))
# Preprocessing
raw_multi_queue <- read_csv(paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_multi_raw_queue.txt",sep=""))
raw_single_queue <- read_csv(paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_single_raw_queue.txt",sep=""))
raw_multi_queue <- raw_multi_queue %>% rename(queue = 'Queued To', queue_amount = 'Queue Amount') %>%
mutate(Replication=as.factor(Replication)) %>%
select(-c(queue)) %>% group_by(Replication, Day) %>% summarize(queue = sum(queue_amount)) %>% ungroup()
raw_single_queue <- raw_single_queue %>% rename(queue = 'Queued To', queue_amount = 'Queue Amount')%>%
mutate(Replication=as.factor(Replication)) %>%
select(-c(queue)) %>% group_by(Replication, Day) %>% summarize(queue = sum(queue_amount)) %>% ungroup()
# Raw Stats
raw_multi_arrival %>% filter(Day >= 3000) %>%
select(-c(Day)) %>% group_by(Replication) %>% summarise(mean=mean(arrival)) %>%
ungroup() %>% summarise(mean_final = mean(mean), sd_final=sd(mean))
raw_single_arrival %>% filter(Day >= 3000) %>%
select(-c(Day)) %>% group_by(Replication) %>% summarise(mean=mean(arrival)) %>%
ungroup() %>% summarise(mean_final = mean(mean), sd_final=sd(mean))
raw_multi_queue %>% filter(Day >= 3000) %>%
select(-c(Day)) %>% group_by(Replication) %>% summarise(mean=mean(queue)) %>%
ungroup() %>% summarise(mean_final = mean(mean), sd_final=sd(mean))
raw_single_queue %>% filter(Day >= 3000) %>%
select(-c(Day)) %>% group_by(Replication) %>% summarise(mean=mean(queue)) %>%
ungroup() %>% summarise(mean_final = mean(mean), sd_final=sd(mean))
# Combines Data
raw_multi <- inner_join(raw_multi_arrival, raw_multi_queue, by=c('Replication', 'Day')) %>%
select(-c(Replication)) %>% group_by(Day) %>%
summarise(mean_arrival = mean(arrival), mean_queue = mean(queue)) %>% ungroup()
raw_multi$type <- "Multi Queue"
raw_signle <- inner_join(raw_single_arrival, raw_single_queue, by=c('Replication', 'Day')) %>%
select(-c(Replication)) %>% group_by(Day) %>%
summarise(mean_arrival = mean(arrival), mean_queue = mean(queue)) %>% ungroup()
raw_signle$type <- "Single Queue"
raw_data <- rbind(raw_multi, raw_signle)
colors <- c("Arrival" = "steelblue2", "Queue/5" = "indianred2", "Mean"="steelblue4")
pMulti <- ggplot(raw_multi, aes(x=Day)) +
geom_line(aes(y=mean_arrival), color='grey60')+
geom_line(aes(y=mean_queue), color='grey60')+
geom_line(aes(y=rollmean(mean_arrival, 180, na.pad=TRUE), color="Arrival"), size=1)+
geom_line(aes(y=rollmean(mean_queue, 180, na.pad=TRUE), color="Queue/5"), size=1)+
ggtitle(paste("Arrival Rate VS Queue Size. Arrival Rate = ",arrival_rate, sep="")) + labs(x = "Simulation Day",y = "People",color = "Legend") +
scale_color_manual(values = colors)
pSingle <- ggplot(raw_signle, aes(x=Day)) +
geom_line(aes(y=mean_arrival), color='grey60')+
geom_line(aes(y=mean_queue), color='grey60')+
geom_line(aes(y=rollmean(mean_arrival, 180, na.pad=TRUE), color="Arrival"), size=1)+
geom_line(aes(y=rollmean(mean_queue, 180, na.pad=TRUE), color="Queue/5"), size=1)+
ggtitle(paste("Arrival Rate VS Queue Size. Arrival Rate = ",arrival_rate, sep="")) + labs(x = "Simulation Day",y = "People",color = "Legend") +
scale_color_manual(values = colors)
ggsave(
filename = paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_single_queue_vs_arrivals.jpeg",sep=""),
pSingle
)
ggsave(
filename = paste(path,"/output/",scenarioFolder,"/",scenarioName,"_arr",arrival_rate,"_multi_queue_vs_arrivals.jpeg",sep=""),
pMulti
)
}
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr35_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
testing_50_m <- testing
biopsy_details <- testing %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
cancer_details <- testing %>%
group_by(replication, post_scan_res) %>%
summarize(count = n()) %>%
filter(post_scan_res %in% c('Stage_1/2', 'Stage_3/4')) %>%
mutate(percent_of_positive = count/sum(count)) %>%
mutate(percent_of_total = count/testing %>% count() %>% pull(n))
cancer_details %>% ungroup() %>% group_by(post_scan_res) %>%
summarize(
count_mean = mean(count),
count_std = sd(count),
count_max = max(count),
count_min = min(count),
count_median = median(count)
)
time_in_system <- testing %>%
summarize(in_queue_mean = mean(in_queue),
in_queue_max = max(in_queue),
in_system_mean = mean(in_system),
in_system_max = max(in_system),
service_time_mean = mean(service_time),
service_time_max = max(service_time),)
time_in_system
testing %>% distinct(id) %>% count()
testing %>% count()
testing
testing %>% mutate(arrived = floor(arrived))
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived)
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived)
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr25_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived)
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived) %>% mean(n)
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived) %>% summarize(mean = mean(n))
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr35_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing %>% mutate(arrived = floor(arrived)) %>% count(arrived) %>% summarize(mean = mean(n))
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr35_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing_35 <- testing
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
testing_35_m <- testing
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr25_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing <- testing %>% drop_na() %>% filter(arrived >= 1080)
testing <- testing %>%
mutate(in_queue = start - arrived) %>%
mutate(in_system = end - arrived) %>%
mutate(service_time = (end - start)*24*60)
testing_25_m <- testing
testing_35_m
biopsy_details <- testing_35_m %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
biopsy_details <- testing_25_m %>%
count(scan_res, biopsy_res)
biopsy_details %>%
filter(scan_res == 'Suspicious', biopsy_res != "not performed") %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Positive') %>%
mutate(p = n/sum(n))
biopsy_details %>%
filter(scan_res == 'Suspicious') %>%
mutate(p = n/sum(n))
testing_25_m
testing_25_m %>% count(scan_res)
testing_35_m %>% count(scan_res)
testing_35_m %>% count(scan_res) %>% count()
testing_35_m %>% count()
testing_25_m %>% count()
testing_25_m %>% filter(scan_res == 'Positive')
testing_25_m %>% filter(scan_res == 'Positive') %>% View()
testing_25_m %>% filter(id == 22533) %>% View()
testing_25_m %>% filter(scan_res == 'Positive' & biopsy_res == 'Negative') %>% View()
testing_25_m %>% filter(scan_res == 'Positive') %>% View()
testing_25_m %>% filter(scan_res == 'Positive' & biopsy_res=='negative biopsy') %>% View()
testing_25_m %>% filter(scan_res == 'Positive' & biopsy_res=='negative biopsy') %>% View()
testing_25_m %>% filter(replication == 0 & ) %>% View()
testing_25_m %>%
filter(replication == 0 & id %in% c(22533, 27164, 27216, 27351, 27463, 9123)) %>%
View()
testing_25_m %>%
filter(id == 9123)) %>%
View()
testing_25_m %>%
filter(id == 9123))
testing_25_m %>%
filter(id == 9123)
testing_25_m %>%
filter(id == 9123) %>% View()
testing <- read_csv("C:/Volodin.K/Work Documents/Nadia-Simulation-Python-Uottawa/output/BASELINE_TEST/baseline_arr25_multi_raw_patients.txt",
col_types = cols(Arrived = col_number(),
`End Service` = col_number(), ID = col_number(),
`Number of Negatives Scans Before` = col_number(),
Replication = col_number(), `Start Service` = col_number()),
col_names = c('replication','numb_negative_bf','id',
'arrived','que_to','start','end',
'scan_res','biopsy_res','post_scan_res'),
skip=1)
testing %>% filter(id == 9123)
testing %>% filter(id == 9123) %>% View()
testing_25_m %>% filter(scan_res == 'Positive' & biopsy_res=='negative biopsy') %>% View()
testing_25_m %>%
filter(replication == 0 & id %in% c(22533, 27164, 27216, 27351, 27463, 9213, 27463)) %>%
View()
testing_25_m %>%
filter(replication == 0 & id %in% c(22533, 27164, 27216, 27351, 27463, 9213)) %>%
View()
testing_25_m %>% mutate(start = start(arrived)) %>% count(start)
testing_25_m %>% mutate(start = floor(start)) %>% count(start)
testing_25_m %>% mutate(start = floor(start)) %>% count(start) %>% aggregate()
testing_25_m %>% mutate(start = floor(start)) %>% count(start) %>%
summarise(mean = mean(n))
testing_35_m %>% mutate(start = floor(start)) %>% count(start) %>%
summarise(mean = mean(n))
testing_35_m %>% mutate(start = floor(start)) %>% count(replication, start) %>%
summarise(mean = mean(n))
testing_25_m %>% mutate(start = floor(start)) %>% count(replication, start) %>%
summarise(mean = mean(n))
testing_25_m %>% count()
testing_35_m %>% count()
testing_25 %>% count(biopsy_res)
testing_25_m %>% count(biopsy_res)
testing_25_m %>% count(biopsy_res) %>% mutate(p = n/sum(n))
testing_25_m %>% count(biopsy_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(biopsy_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(scan_res) %>% mutate(p = n/sum(n) * 100)
testing_25_m %>% count(scan_res) %>% mutate(p = n/sum(n) * 100)
testing_25_m %>% count(biopsy_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(biopsy_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(post_scan_res) %>% mutate(p = n/sum(n) * 100)
testing_25_m %>% count(post_scan_res) %>% mutate(p = n/sum(n) * 100)
testing_25_m %>% count(scan_res, post_scan_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(scan_res, post_scan_res) %>% mutate(p = n/sum(n) * 100)
testing_35_m %>% count(scan_res, biopsy_res) %>% mutate(p = n/sum(n) * 100)
testing_25_m %>% count(scan_res, biopsy_res) %>% mutate(p = n/sum(n) * 100)
