create_report('SCENARIO 5', 'sch5', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 5', 'sch5', 'arr30', 'mm3')
library(here)
library(arrow)
library(tidyverse)
library(xlsx)
# Read Data
read_data <- function(ref) {
res <- list()
pat <- arrow::read_feather(here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-patients.feather')))
pat <- pat %>%
mutate(wait_time = start_scan - arrived) %>%
mutate(in_system = end_scan - arrived) %>%
mutate(service_time = end_scan - start_scan) %>%
mutate(wait_time_cat=cut(wait_time,
breaks=c(-1, 180, 180*2, 180*3, 180*4, 180*5, 180*6, 180*7, 180*9, 180*10, Inf),
labels=c("0-6 Month","6-12 Month","12-18 Month", "18-24 Month", "24-30 Month", "30-36 Month",
"36-42 Month", "42-48 Month", "48-54 Month", "54-60 Month")))
res[[1]] = pat
queue <- arrow::read_feather(here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-queue.feather')))
res[[2]] = queue
return(res)
}
# Validation/Checking
check_pat_validity <- function(data) {
# Checks Numbers
print('Unique Arrivals')
data %>% distinct(replication, patient_id) %>% count(replication) %>%
summarize(arr_mean = mean(n), SD = sd(n)) %>% print()
print('Total Scanned')
data %>% drop_na(replication, end_scan) %>% count(replication) %>%
summarize(arr_mean = mean(n), SD = sd(n))  %>% print()
print('Total Returns')
data %>% count(replication) %>%
full_join((data %>% distinct(replication, patient_id) %>% count(replication)), by='replication') %>%
mutate(n = n.x-n.y) %>%
summarize(arr_mean = mean(n), SD = sd(n)) %>% print()
print('Averages')
data %>% group_by(replication) %>%
summarize(service_time = mean(service_time, na.rm = T),
wait_time = mean(wait_time, na.rm = T),
in_system = mean(in_system, na.rm = T)) %>% ungroup() %>%
summarize(mean_st = mean(service_time) * 24*60,
sd_st = sd(service_time) * 24*60,
mean_wt = mean(wait_time),
sd_wt = sd(wait_time),
mean_is = mean(in_system),
sd_is = sd(in_system)) %>% print()
# Makes Sure data is saved correctly
data %>% distinct(replication) %>% pull(replication) %>% print()
data %>% distinct(prev_neg_returns) %>% pull(prev_neg_returns) %>% print()
data %>% distinct(scan_result) %>% pull(scan_result) %>% print()
data %>% distinct(post_scan_result) %>% pull(post_scan_result) %>% print()
data %>% distinct(biopsy_result) %>% pull(biopsy_result) %>% print()
data %>% distinct(cancer_stage) %>% pull(cancer_stage) %>% print()
data %>% distinct(return_delay) %>% pull(return_delay) %>% print()
# Scan Distribution
data %>% count(scan_result) %>% drop_na() %>% mutate(p = n/sum(n)*100)
# Cancer Distribution
data %>% count(cancer_stage) %>% drop_na() %>% mutate(p = n/sum(n)*100)
# Negative Scan Checking
data %>% filter(scan_result == "Negative") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Negative") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Negative") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Negative") %>% distinct(return_delay)
data %>% filter(scan_result == "Negative") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Negative") %>% count(prev_neg_returns, post_scan_result) %>% # Balking
group_by(prev_neg_returns) %>% mutate(p = n/sum(n)*100)
data %>% filter(scan_result == "Negative") %>% count(post_scan_result, return_delay) %>% # Return Delay
group_by(post_scan_result) %>% mutate(p = n/sum(n)*100)
# Suspicious Scan Checking
data %>% filter(scan_result == "Suspicious") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Suspicious") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Suspicious") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Suspicious") %>% distinct(return_delay)
data %>% filter(scan_result == "Suspicious") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result) %>% mutate(p=n/sum(n)) # Biopsy Need Distribution
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result, biopsy_result) %>% # Biopsy Distribution
group_by(post_scan_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result, biopsy_result, return_delay) %>% # Return Delay Distribution
group_by(post_scan_result, biopsy_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Suspicious") %>% count(wait_time_cat, biopsy_result, cancer_stage) %>% # Cancer Staging
group_by(biopsy_result, wait_time_cat) %>% mutate(p=n/sum(n))
# Positive Scan Checking
data %>% filter(scan_result == "Positive") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Positive") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Positive") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Positive") %>% distinct(return_delay)
data %>% filter(scan_result == "Positive") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Positive") %>% count(biopsy_result) %>% mutate(p=n/sum(n))  # Biopsy Distribution
data %>% filter(scan_result == "Positive") %>% count(biopsy_result, return_delay) %>% # Return Delay Distribution
group_by(biopsy_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Positive") %>% count(wait_time_cat, biopsy_result, cancer_stage) %>% # Cancer Staging
group_by(biopsy_result, wait_time_cat) %>% mutate(p=n/sum(n))
}
check_queue_graph <- function(data) {
data <- data %>% group_by(day) %>% summarize(m_arr = mean(initial_arrival), m_que = mean(end_queue))
data %>% ggplot(aes(x=day)) +
geom_line(aes(y=m_que/100), color='red')+
geom_line(aes(y=m_arr), color='blue')+
theme_minimal()
}
# Main Analysis
generate_outputs <- function(pat, queue, warm_up, ref) {
# remove warm-up
pat <- pat %>% filter(arrived >= warm_up)
queue <- queue %>% filter(day >= warm_up)
# arrivals etc
unique_arr <- pat %>% distinct(replication, patient_id) %>% count(replication) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='unique_arrivals')
total_scan <- pat %>% drop_na(replication, end_scan) %>% count(replication) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='total_scanned')
total_return <- pat %>% count(replication) %>%
full_join((pat %>% distinct(replication, patient_id) %>% count(replication)), by='replication') %>%
mutate(n = n.x-n.y) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='total_returns')
arr_data <- unique_arr %>%
bind_cols(total_scan %>% select(-desc)) %>%
bind_cols(total_return %>% select(-desc))
# cancer staging
cancer <- pat %>% drop_na(start_scan) %>%
mutate(cancer = case_when(
cancer_stage == "Stage_1" ~ "Stage_1/2", cancer_stage == "Stage_2" ~ "Stage_1/2",
cancer_stage == "Stage_3" ~ "Stage_3/4", cancer_stage == "Stage_4" ~ "Stage_3/4")) %>%
count(replication, cancer) %>%
mutate(n_cancer = case_when(cancer == "Stage_1/2" ~ n, cancer == "Stage_3/4" ~ n)) %>%
group_by(replication) %>%
mutate(p_tot = n/sum(n)*100) %>%
mutate(p_cancer = n_cancer/sum(n_cancer, na.rm = T)*100) %>%
drop_na() %>% select(replication, cancer, n, p_tot, p_cancer) %>% ungroup() %>%
group_by(cancer) %>%
summarize(
mean_c = mean(n), sd_c = sd(n), median_c = median(n), max_c = max(n), min_c = min(n),
mean_ptot = mean(p_tot), sd_ptot = sd(p_tot), median_ptot = median(p_tot),
max_ptot = max(p_tot), min_ptot = min(p_tot),
mean_pcancer = mean(p_cancer), sd_pcancer = sd(p_cancer), median_pcancer = median(p_cancer),
max_pcancer = max(p_cancer), min_pcancer = min(p_cancer)
) %>%
pivot_longer(cols=c(
mean_c, sd_c, median_c, max_c, min_c,
mean_ptot, sd_ptot, median_ptot, max_ptot, min_ptot,
mean_pcancer, sd_pcancer, median_pcancer, max_pcancer, min_pcancer
)) %>%
separate(name, c('stat', 'category')) %>%
mutate(category = case_when(
category == 'c' ~ 'count',
category == 'ptot' ~ 'Percentage of Total Scans',
category == 'pcancer' ~ 'Pecentage of all Cancer Results'
)) %>%
pivot_wider(names_from = cancer, values_from = value)
# time in queue and queue size
wait_times <- pat %>% drop_na(start_scan) %>%
group_by(replication) %>%
summarize(
wt = mean(wait_time), is = mean(in_system), st = mean(service_time)*24*60,
wt_med = median(wait_time), is_med = median(in_system), st_med = median(service_time)*24*60,
wt_max = max(wait_time), is_max = max(in_system), st_max = max(service_time)*24*60,
wt_min = min(wait_time), is_min = min(in_system), st_min = min(service_time)*24*60
) %>%
ungroup() %>%
summarize(
mean_wt = mean(wt), sd_wt = sd(wt), median_wt = median(wt_med), avgmax_wt = mean(wt_max),
avgmin_wt = mean(wt_min), overmax_wt = max(wt_max), overmin_wt = min(wt_min),
mean_is = mean(is), sd_is = sd(is), median_is = median(is_med), avgmax_is = mean(is_max),
avgmin_is = mean(is_min), overmax_is = max(is_max), overmin_is = min(is_min),
mean_st = mean(st), sd_st = sd(st), median_st = median(st_med), avgmax_st = mean(st_max),
avgmin_st = mean(st_min), overmax_st = max(st_max), overmin_st = min(st_min)
) %>%
pivot_longer(cols=everything()) %>%
separate(name, c('stat','category')) %>%
mutate(category = case_when(
category == 'wt' ~ 'Wait Time',
category == 'is' ~ 'Time in System',
category == 'st' ~ 'Service Time'
)) %>%
mutate(stat = case_when(
stat == 'overmax' ~ 'overall_max',
stat == 'overmin' ~ 'overall_min',
stat == 'avgmax' ~ 'avg_max',
stat == 'avgmin' ~ 'avg_min',
TRUE ~ stat
)) %>%
pivot_wider(names_from = category, values_from = value)
queue_size <- queue %>% group_by(day) %>%
summarize(
m_que = mean(end_queue), med_que = median(end_queue), max_q = max(end_queue), min_q = min(end_queue)
) %>% ungroup() %>%
summarize(
mean = mean(m_que), sd = sd(m_que), median = median(med_que), avg_max = mean(max_q),
avg_min = mean(min_q), overall_max = max(max_q), overall_min = min(max_q)
) %>%
pivot_longer(cols = everything(), names_to = 'stat', values_to = 'Queue Size')
queue_data <- wait_times %>%
bind_cols(queue_size %>% select(-stat))
# utilization
util_data <- pat %>% drop_na(start_scan) %>%
mutate(serv_day = floor(start_scan)) %>%
mutate(usage = service_time*24/8*100/3) %>% group_by(replication, serv_day) %>%
summarize(utilization = sum(usage)) %>% ungroup(serv_day) %>%
summarize(util = mean(utilization), ov_median = median(utilization),
ov_max=max(utilization), ov_min=min(utilization)) %>% ungroup() %>%
summarize(mean = mean(util), sd = sd(util), median = median(ov_median),
avg_max = mean(ov_max), avg_min = mean(ov_min),
overall_max = max(ov_max), overall_min = min(ov_min)) %>%
pivot_longer(cols=everything(), names_to='stat', values_to='Utilization')
# Export
write.xlsx(cancer,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Cancer Data",
col.names = TRUE, row.names = TRUE, append = FALSE)
write.xlsx(arr_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Arrival Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
write.xlsx(queue_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Queue Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
write.xlsx(util_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Utilization Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
}
# Analysis Function
create_report <- function(scenario_folder, scenario_name, arrival_rate, capacity) {
reference <- c(scenario_folder, scenario_name, arrival_rate, capacity)
all_data <- read_data(reference)
pat_data <- all_data[[1]]
queue_data <- all_data[[2]]
warm_up_days <- 1080
generate_outputs(pat_data, queue_data, warm_up_days, reference)
}
create_report('Baseline', 'baseline', 'arr18', 'mm3')
create_report('Baseline', 'baseline', 'arr25.799999999999997', 'mm3')
create_report('Baseline', 'baseline', 'arr30', 'mm3')
create_report('Baseline', 'baseline', 'arr45', 'mm3')
create_report('SCENARIO 1', 'sch1', 'arr18', 'mm3')
create_report('SCENARIO 1', 'sch1', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 1', 'sch1', 'arr30', 'mm3')
create_report('SCENARIO 2', 'sch2', 'arr18', 'mm3')
create_report('SCENARIO 2', 'sch2', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 2', 'sch2', 'arr30', 'mm3')
create_report('SCENARIO 3', 'sch3', 'arr18', 'mm3')
create_report('SCENARIO 3', 'sch3', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 3', 'sch3', 'arr30', 'mm3')
create_report('SCENARIO 4', 'sch4', 'arr18', 'mm3')
create_report('SCENARIO 4', 'sch4', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 4', 'sch4', 'arr30', 'mm3')
create_report('SCENARIO 5', 'sch5', 'arr18', 'mm3')
create_report('SCENARIO 5', 'sch5', 'arr25.799999999999997', 'mm3')
create_report('SCENARIO 5', 'sch5', 'arr30', 'mm3')
library(here)
library(arrow)
library(tidyverse)
library(xlsx)
# Read Data
read_data <- function(ref) {
res <- list()
pat <- arrow::read_feather(here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-patients.feather')))
pat <- pat %>%
mutate(wait_time = start_scan - arrived) %>%
mutate(in_system = end_scan - arrived) %>%
mutate(service_time = end_scan - start_scan) %>%
mutate(wait_time_cat=cut(wait_time,
breaks=c(-1, 180, 180*2, 180*3, 180*4, 180*5, 180*6, 180*7, 180*9, 180*10, Inf),
labels=c("0-6 Month","6-12 Month","12-18 Month", "18-24 Month", "24-30 Month", "30-36 Month",
"36-42 Month", "42-48 Month", "48-54 Month", "54-60 Month")))
res[[1]] = pat
queue <- arrow::read_feather(here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-queue.feather')))
res[[2]] = queue
return(res)
}
# Validation/Checking
check_pat_validity <- function(data) {
# Checks Numbers
print('Unique Arrivals')
data %>% distinct(replication, patient_id) %>% count(replication) %>%
summarize(arr_mean = mean(n), SD = sd(n)) %>% print()
print('Total Scanned')
data %>% drop_na(replication, end_scan) %>% count(replication) %>%
summarize(arr_mean = mean(n), SD = sd(n))  %>% print()
print('Total Returns')
data %>% count(replication) %>%
full_join((data %>% distinct(replication, patient_id) %>% count(replication)), by='replication') %>%
mutate(n = n.x-n.y) %>%
summarize(arr_mean = mean(n), SD = sd(n)) %>% print()
print('Averages')
data %>% group_by(replication) %>%
summarize(service_time = mean(service_time, na.rm = T),
wait_time = mean(wait_time, na.rm = T),
in_system = mean(in_system, na.rm = T)) %>% ungroup() %>%
summarize(mean_st = mean(service_time) * 24*60,
sd_st = sd(service_time) * 24*60,
mean_wt = mean(wait_time),
sd_wt = sd(wait_time),
mean_is = mean(in_system),
sd_is = sd(in_system)) %>% print()
# Makes Sure data is saved correctly
data %>% distinct(replication) %>% pull(replication) %>% print()
data %>% distinct(prev_neg_returns) %>% pull(prev_neg_returns) %>% print()
data %>% distinct(scan_result) %>% pull(scan_result) %>% print()
data %>% distinct(post_scan_result) %>% pull(post_scan_result) %>% print()
data %>% distinct(biopsy_result) %>% pull(biopsy_result) %>% print()
data %>% distinct(cancer_stage) %>% pull(cancer_stage) %>% print()
data %>% distinct(return_delay) %>% pull(return_delay) %>% print()
# Scan Distribution
data %>% count(scan_result) %>% drop_na() %>% mutate(p = n/sum(n)*100)
# Cancer Distribution
data %>% count(cancer_stage) %>% drop_na() %>% mutate(p = n/sum(n)*100)
# Negative Scan Checking
data %>% filter(scan_result == "Negative") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Negative") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Negative") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Negative") %>% distinct(return_delay)
data %>% filter(scan_result == "Negative") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Negative") %>% count(prev_neg_returns, post_scan_result) %>% # Balking
group_by(prev_neg_returns) %>% mutate(p = n/sum(n)*100)
data %>% filter(scan_result == "Negative") %>% count(post_scan_result, return_delay) %>% # Return Delay
group_by(post_scan_result) %>% mutate(p = n/sum(n)*100)
# Suspicious Scan Checking
data %>% filter(scan_result == "Suspicious") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Suspicious") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Suspicious") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Suspicious") %>% distinct(return_delay)
data %>% filter(scan_result == "Suspicious") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result) %>% mutate(p=n/sum(n)) # Biopsy Need Distribution
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result, biopsy_result) %>% # Biopsy Distribution
group_by(post_scan_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Suspicious") %>% count(post_scan_result, biopsy_result, return_delay) %>% # Return Delay Distribution
group_by(post_scan_result, biopsy_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Suspicious") %>% count(wait_time_cat, biopsy_result, cancer_stage) %>% # Cancer Staging
group_by(biopsy_result, wait_time_cat) %>% mutate(p=n/sum(n))
# Positive Scan Checking
data %>% filter(scan_result == "Positive") %>% distinct(post_scan_result)
data %>% filter(scan_result == "Positive") %>% distinct(biopsy_result)
data %>% filter(scan_result == "Positive") %>% distinct(cancer_stage)
data %>% filter(scan_result == "Positive") %>% distinct(return_delay)
data %>% filter(scan_result == "Positive") %>% distinct(wait_time_cat)
data %>% filter(scan_result == "Positive") %>% count(biopsy_result) %>% mutate(p=n/sum(n))  # Biopsy Distribution
data %>% filter(scan_result == "Positive") %>% count(biopsy_result, return_delay) %>% # Return Delay Distribution
group_by(biopsy_result) %>% mutate(p=n/sum(n))
data %>% filter(scan_result == "Positive") %>% count(wait_time_cat, biopsy_result, cancer_stage) %>% # Cancer Staging
group_by(biopsy_result, wait_time_cat) %>% mutate(p=n/sum(n))
}
check_queue_graph <- function(data) {
data <- data %>% group_by(day) %>% summarize(m_arr = mean(initial_arrival), m_que = mean(end_queue))
data %>% ggplot(aes(x=day)) +
geom_line(aes(y=m_que/100), color='red')+
geom_line(aes(y=m_arr), color='blue')+
theme_minimal()
}
# Main Analysis
generate_outputs <- function(pat, queue, warm_up, ref) {
# remove warm-up
pat <- pat %>% filter(arrived >= warm_up)
queue <- queue %>% filter(day >= warm_up)
# arrivals etc
unique_arr <- pat %>% distinct(replication, patient_id) %>% count(replication) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='unique_arrivals')
total_scan <- pat %>% drop_na(replication, end_scan) %>% count(replication) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='total_scanned')
total_return <- pat %>% count(replication) %>%
full_join((pat %>% distinct(replication, patient_id) %>% count(replication)), by='replication') %>%
mutate(n = n.x-n.y) %>%
summarize(mean = mean(n), sd = sd(n), median=median(n), min=min(n), max=max(n)) %>%
pivot_longer(cols=c('mean','sd', 'median', 'max','min'), names_to='desc', values_to='total_returns')
arr_data <- unique_arr %>%
bind_cols(total_scan %>% select(-desc)) %>%
bind_cols(total_return %>% select(-desc))
# cancer staging
cancer <- pat %>% drop_na(start_scan) %>%
mutate(cancer = case_when(
cancer_stage == "Stage_1" ~ "Stage_1/2", cancer_stage == "Stage_2" ~ "Stage_1/2",
cancer_stage == "Stage_3" ~ "Stage_3/4", cancer_stage == "Stage_4" ~ "Stage_3/4")) %>%
count(replication, cancer) %>%
mutate(n_cancer = case_when(cancer == "Stage_1/2" ~ n, cancer == "Stage_3/4" ~ n)) %>%
group_by(replication) %>%
mutate(p_tot = n/sum(n)*100) %>%
mutate(p_cancer = n_cancer/sum(n_cancer, na.rm = T)*100) %>%
drop_na() %>% select(replication, cancer, n, p_tot, p_cancer) %>% ungroup() %>%
group_by(cancer) %>%
summarize(
mean_c = mean(n), sd_c = sd(n), median_c = median(n), max_c = max(n), min_c = min(n),
mean_ptot = mean(p_tot), sd_ptot = sd(p_tot), median_ptot = median(p_tot),
max_ptot = max(p_tot), min_ptot = min(p_tot),
mean_pcancer = mean(p_cancer), sd_pcancer = sd(p_cancer), median_pcancer = median(p_cancer),
max_pcancer = max(p_cancer), min_pcancer = min(p_cancer)
) %>%
pivot_longer(cols=c(
mean_c, sd_c, median_c, max_c, min_c,
mean_ptot, sd_ptot, median_ptot, max_ptot, min_ptot,
mean_pcancer, sd_pcancer, median_pcancer, max_pcancer, min_pcancer
)) %>%
separate(name, c('stat', 'category')) %>%
mutate(category = case_when(
category == 'c' ~ 'count',
category == 'ptot' ~ 'Percentage of Total Scans',
category == 'pcancer' ~ 'Pecentage of all Cancer Results'
)) %>%
pivot_wider(names_from = cancer, values_from = value)
# time in queue and queue size
wait_times <- pat %>% drop_na(start_scan) %>%
group_by(replication) %>%
summarize(
wt = mean(wait_time), is = mean(in_system), st = mean(service_time)*24*60,
wt_med = median(wait_time), is_med = median(in_system), st_med = median(service_time)*24*60,
wt_max = max(wait_time), is_max = max(in_system), st_max = max(service_time)*24*60,
wt_min = min(wait_time), is_min = min(in_system), st_min = min(service_time)*24*60
) %>%
ungroup() %>%
summarize(
mean_wt = mean(wt), sd_wt = sd(wt), median_wt = median(wt_med), avgmax_wt = mean(wt_max),
avgmin_wt = mean(wt_min), overmax_wt = max(wt_max), overmin_wt = min(wt_min),
mean_is = mean(is), sd_is = sd(is), median_is = median(is_med), avgmax_is = mean(is_max),
avgmin_is = mean(is_min), overmax_is = max(is_max), overmin_is = min(is_min),
mean_st = mean(st), sd_st = sd(st), median_st = median(st_med), avgmax_st = mean(st_max),
avgmin_st = mean(st_min), overmax_st = max(st_max), overmin_st = min(st_min)
) %>%
pivot_longer(cols=everything()) %>%
separate(name, c('stat','category')) %>%
mutate(category = case_when(
category == 'wt' ~ 'Wait Time',
category == 'is' ~ 'Time in System',
category == 'st' ~ 'Service Time'
)) %>%
mutate(stat = case_when(
stat == 'overmax' ~ 'overall_max',
stat == 'overmin' ~ 'overall_min',
stat == 'avgmax' ~ 'avg_max',
stat == 'avgmin' ~ 'avg_min',
TRUE ~ stat
)) %>%
pivot_wider(names_from = category, values_from = value)
queue_size <- queue %>% group_by(day) %>%
summarize(
m_que = mean(end_queue), med_que = median(end_queue), max_q = max(end_queue), min_q = min(end_queue)
) %>% ungroup() %>%
summarize(
mean = mean(m_que), sd = sd(m_que), median = median(med_que), avg_max = mean(max_q),
avg_min = mean(min_q), overall_max = max(max_q), overall_min = min(max_q)
) %>%
pivot_longer(cols = everything(), names_to = 'stat', values_to = 'Queue Size')
queue_data <- wait_times %>%
bind_cols(queue_size %>% select(-stat))
# utilization
util_data <- pat %>% drop_na(start_scan) %>%
mutate(serv_day = floor(start_scan)) %>%
mutate(usage = service_time*24/8*100/3) %>% group_by(replication, serv_day) %>%
summarize(utilization = sum(usage)) %>% ungroup(serv_day) %>%
summarize(util = mean(utilization), ov_median = median(utilization),
ov_max=max(utilization), ov_min=min(utilization)) %>% ungroup() %>%
summarize(mean = mean(util), sd = sd(util), median = median(ov_median),
avg_max = mean(ov_max), avg_min = mean(ov_min),
overall_max = max(ov_max), overall_min = min(ov_min)) %>%
pivot_longer(cols=everything(), names_to='stat', values_to='Utilization')
# Export
write.xlsx(cancer,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Cancer Data",
col.names = TRUE, row.names = TRUE, append = FALSE)
write.xlsx(arr_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Arrival Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
write.xlsx(queue_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Queue Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
write.xlsx(util_data,
here('output',ref[1], paste0(ref[2],'-',ref[3],'-',ref[4],'-res.xlsx')),
sheetName = "Utilization Data",
col.names = TRUE, row.names = TRUE, append = TRUE)
}
# Analysis Function
create_report <- function(scenario_folder, scenario_name, arrival_rate, capacity) {
reference <- c(scenario_folder, scenario_name, arrival_rate, capacity)
all_data <- read_data(reference)
pat_data <- all_data[[1]]
queue_data <- all_data[[2]]
warm_up_days <- 1080
generate_outputs(pat_data, queue_data, warm_up_days, reference)
}
# create_report('Baseline', 'baseline', 'arr18', 'mm3')
# create_report('Baseline', 'baseline', 'arr25.799999999999997', 'mm3')
# create_report('Baseline', 'baseline', 'arr30', 'mm3')
# create_report('Baseline', 'baseline', 'arr45', 'mm3')
#
# create_report('SCENARIO 1', 'sch1', 'arr18', 'mm3')
# create_report('SCENARIO 1', 'sch1', 'arr25.799999999999997', 'mm3')
# create_report('SCENARIO 1', 'sch1', 'arr30', 'mm3')
create_report('SCENARIO 1', 'sch1', 'arr45', 'mm3')
#
# create_report('SCENARIO 2', 'sch2', 'arr18', 'mm3')
# create_report('SCENARIO 2', 'sch2', 'arr25.799999999999997', 'mm3')
# create_report('SCENARIO 2', 'sch2', 'arr30', 'mm3')
#
# create_report('SCENARIO 3', 'sch3', 'arr18', 'mm3')
# create_report('SCENARIO 3', 'sch3', 'arr25.799999999999997', 'mm3')
# create_report('SCENARIO 3', 'sch3', 'arr30', 'mm3')
#
# create_report('SCENARIO 4', 'sch4', 'arr18', 'mm3')
# create_report('SCENARIO 4', 'sch4', 'arr25.799999999999997', 'mm3')
# create_report('SCENARIO 4', 'sch4', 'arr30', 'mm3')
#
# create_report('SCENARIO 5', 'sch5', 'arr18', 'mm3')
# create_report('SCENARIO 5', 'sch5', 'arr25.799999999999997', 'mm3')
# create_report('SCENARIO 5', 'sch5', 'arr30', 'mm3')
